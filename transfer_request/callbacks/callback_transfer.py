import os
from aiogram import F, types, Router, Bot,Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.utils.formatting import as_list, as_marked_section, Bold,Spoiler #Italic, as_numbered_list –∏ —Ç–¥ 
from aiogram.types import Message
from sqlalchemy import create_engine, MetaData, Table, func
from sqlalchemy.orm import sessionmaker
from avtorization.utils.states import FSMAdmin
from datetime import date
from sqlalchemy import insert, func
import re
from HR_employee.calendar import nav_cal_handler
from handlers.keyboards.inline import init_transf, init_transf_d

from filters.chat_types import ChatTypeFilter

from utils.states import Employee
from transfer_request.utils.states import transferRequest
from keyboards import reply, inline
from transfer_request.keyboards.inline import get_callback_btns, send_transfer, send_transferAct, send_transfer_d, send_transferAct_d

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


bot = Bot(token=os.getenv('TOKEN'), parse_mode=ParseMode.HTML)
dp = Dispatcher()

from config import DATABASE_URI

# –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URI)

# –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
Session = sessionmaker(bind=engine)

# –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ
metadata = MetaData()
table = Table('employee', metadata, autoload_with=engine)
table_division = Table('Division', metadata, autoload_with=engine)
table_position = Table('Position', metadata, autoload_with=engine)
application = Table('Applications', metadata, autoload_with=engine)

async def staff_post(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    # –ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    session = Session()
    search_bd = user_data.get('search_bd')
    result = session.query(table).filter(table.c.id == search_bd).first()
    initiator = user_data.get('initiator')
    resultInitiator = session.query(table).filter(table.c.id_telegram == str(initiator)).first()
    is_s = user_data.get('is_staff')

    data = await state.get_data()

    goals_list = data.get("goals_list")
    due_date_list = data.get("due_date_list")
    results_list = data.get("results_list")

    search = user_data.get('search')
    name = user_data.get('search_name')
    division = user_data.get('search_division')
    post = user_data.get('search_post')
    if resultInitiator:
        if search == False:
            await message.answer(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥\n"
            f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {resultInitiator.Surname} {resultInitiator.Name[0]}. {resultInitiator.Middle_name[0]}.\n"
            f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {result.Surname} {result.Name} {result.Middle_name}, {result.Division}, {result.Position}\n"
            f"<b>–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –°—Ä–æ–∫–∞:</b> {is_s}."  
            )
        else:
            result_Division = session.query(table_division).filter(table_division.c.id == int(division)).first()
            await message.answer(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥\n"
            f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {resultInitiator.Surname} {resultInitiator.Name[0]}. {resultInitiator.Middle_name[0]}.\n"
            f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {name}, {result_Division.Division}, {post}\n"
            f"<b>–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –°—Ä–æ–∫–∞:</b> {is_s}."  
            )
        if len(goals_list) == len(due_date_list) == len(results_list):
            #–í—Å–µ —Å–ø–∏—Å–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
            for i, goal in enumerate(goals_list):
                due_date = due_date_list[i]
                result = results_list[i]
                if i == len(goals_list) - 1:
                    message_text = f"<b>–¶–µ–ª—å {i + 1}:</b> {goal}\n<b>–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {due_date}\n<b>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}"
                    await message.answer(message_text, 
                    )
                    await message.answer(
                        "–ó–∞–ø—Ä–æ—Å –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ?",
                        reply_markup=get_callback_btns(
                        btns={
                        '–î–∞': f'yes_application',
                        '–ù–µ—Ç': f'no_application',
                        }   
                )
            )
                else:
                    message_text = f"<b>–¶–µ–ª—å {i + 1}:</b> {goal}\n<b>–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {due_date}\n<b>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}"
                    await message.answer(message_text)
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞", reply_markup=reply.main
            )
    else:
        await state.clear()
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ", reply_markup=reply.start_kb)
        await state.set_state(FSMAdmin.phone)

@user_private_router.callback_query(F.data.startswith("yes_application"))
async def yes_app(callback:types.CallbackQuery):
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É HR?",      
        reply_markup=get_callback_btns(
                btns={
                    '–î–∞': f'go_application',
                    '–ù–µ—Ç': f'stop_application',
                }
            ),    
    )

@user_private_router.callback_query(F.data.startswith("go_application"))
async def go_app(callback: types.CallbackQuery, state:FSMContext):
    await callback.message.delete_reply_markup()
    today = date.today()
    session = Session()
    user_id = callback.from_user.id
    user_id_str = str(user_id) 
    existing_record_HR = session.query(table).filter(table.c.Surname == "–ú–∏–Ω–∏–Ω", table.c.Name == "–í–∞—Å—è", table.c.Middle_name == "—Ä–æ–∑").first()
    user_info = session.query(table).filter(table.c.id_telegram == user_id_str).first()
    if user_info:
        last_id = session.query(func.max(application.c.id)).scalar()
        new_id = last_id + 1
        data = await state.get_data()
        search_bd = data.get('search_bd')
        is_s = data.get('is_staff')
        goals_list = data.get("goals_list")
        due_date_list = data.get("due_date_list")
        results_list = data.get("results_list")
        search = data.get('search')
        name = data.get('search_name')
        division = data.get('search_division')
        post = data.get('search_post')
        goals_IS = ""
        for i, goal in enumerate(goals_list):
                due_date = due_date_list[i]
                result = results_list[i]
                goals_IS += f"<b>–¶–µ–ª—å {i + 1}:</b> {goal}\\n<b>–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {due_date}\\n<b>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}\\n"    
        if search == False:
            result = session.query(table).filter(table.c.id == search_bd).first()
            application_data = {
                "ID_Initiator": user_info.id,
                "ID_Employee": result.id,
                "ID_Class_application": 1,
                'End_date_IS': is_s,
                'Goals_for_period_IS': goals_IS,
                "Date_application": today.strftime('%Y-%m-%d'),
            }
            session.execute(
                insert(application).values(application_data)
            )
            await bot.send_message(callback.from_user.id, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            await bot.send_message(callback.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–µ —Ä–µ—à–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=reply.main)
            text =  f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥</b>\n<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: </b>{new_id}\n<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {user_info.Surname} {user_info.Name[0]}. {user_info.Middle_name[0]}.\n<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {result.Surname} {result.Name} {result.Middle_name}, {result.Division}, {result.Position}\n<b>–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –°—Ä–æ–∫–∞:</b> {is_s}.\n"  
            text += f"<b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:</b> {today.strftime('%Y-%m-%d')}"        
            await bot.send_message(existing_record_HR.id_telegram,
                                   f"<b>üîî–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>")
            await bot.send_message(existing_record_HR.id_telegram,  text,
                                parse_mode="HTML", reply_markup=send_transfer)
        else:
            result_Division = session.query(table_division).filter(table_division.c.id == int(division)).first()
            resultPositiong = session.query(table_position).filter(table_position.c.Position == str(post)).first()
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Applications
            application_data = {
                "ID_Initiator": user_info.id,
                "ID_Employee": 1,
                "ID_Class_application": 1,
                'Full_name_employee': name,
                'ID_Division': int(division),
                'ID_Position': resultPositiong.id,
                'End_date_IS': is_s,
                'Goals_for_period_IS': goals_IS,
                "Date_application": today.strftime('%Y-%m-%d'),
            }
            session.execute(
                insert(application).values(application_data)
            )
            today = date.today()
            await bot.send_message(callback.from_user.id, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            await bot.send_message(callback.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–µ —Ä–µ—à–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=reply.main)
            text =  f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥</b>\n<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: </b>{new_id}\n<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {user_info.Surname} {user_info.Name[0]}. {user_info.Middle_name[0]}.\n<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {name}, {result_Division.Division}, {post}\n<b>–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –°—Ä–æ–∫–∞:</b> {is_s}.\n"  
            text += f"<b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:</b> {today.strftime('%Y-%m-%d')}"        
            await bot.send_message(existing_record_HR.id_telegram,
                                   f"<b>üîî–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>")
            await bot.send_message(existing_record_HR.id_telegram,  text,
                                parse_mode="HTML", reply_markup=send_transfer)
            
        session.commit()
        await state.clear()
        await state.update_data(unwrap = False)
    else:
        await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
        await bot.send_message(callback.from_user.id, "–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ", reply_markup=reply.start_kb)



message_states_app = {}
@user_private_router.callback_query(F.data =='unwrap_trans')
async def unwrap_message_app(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    session = Session()

    msg_id = call.message.message_id
    message_text = call.message.text

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:"
    pattern = r"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:\s*(\d+)"

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    match = re.search(pattern, message_text)
    number_q = match.group(1)


    id_info = session.query(application).filter(application.c.id == number_q).first()
    deadline_prob = id_info.End_date_IS
    goals_list = id_info.Goals_for_period_IS
    number_init = id_info.ID_Initiator
    date_info = id_info.Date_application

    id_empl = id_info.ID_Employee
    empl_id = session.query(table).filter(table.c.id == id_empl).first()
    if id_info.Full_name_employee:
        fullname_employee = id_info.Full_name_employee
    else:
        fullname_employee = f"{empl_id.Surname} {empl_id.Name} {empl_id.Middle_name}"

    if id_info.ID_Division:
        id_divis = id_info.ID_Division
        divis_id = session.query(table_division).filter(table_division.c.id == id_divis).first()
        divis_info = divis_id.Division
    else:
        divis_info = empl_id.Division

    if id_info.ID_Position:
        id_post = id_info.ID_Position
        post_id = session.query(table_position).filter(table_position.c.id == id_post).first()
        post_info = post_id.Position
    else:
        post_info = empl_id.Position

    if msg_id not in message_states_app:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ "second"
        message_states_app[msg_id] = "second"

    existing_record_HR = session.query(table).filter(table.c.Surname == "–ú–∏–Ω–∏–Ω", table.c.Name == "–í–∞—Å—è", table.c.Middle_name == "—Ä–æ–∑", table.c.id_telegram == str(call.from_user.id)).first()
    if id_info.Date_planned_deadline != None and message_states_app[msg_id] == "first" and existing_record_HR != None:
        reply_markup = send_transferAct
        date_planned = f"\n<b>–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞:</b> {id_info.Date_planned_deadline}"
    elif id_info.Date_planned_deadline != None and message_states_app[msg_id] == "second" and existing_record_HR != None:   
        reply_markup = send_transferAct_d
        date_planned = f"\n<b>–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞:</b> {id_info.Date_planned_deadline}"
    elif id_info.Date_planned_deadline == None and message_states_app[msg_id] == "first" and existing_record_HR != None:
        reply_markup = send_transfer
        date_planned = ""
    elif id_info.Date_planned_deadline == None and message_states_app[msg_id] == "second" and existing_record_HR != None:
        reply_markup = send_transfer_d
        date_planned = ""
    elif id_info.Date_planned_deadline != None and message_states_app[msg_id] == "first" and existing_record_HR == None:
        reply_markup = init_transf
        date_planned = f"\n<b>–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞:</b> {id_info.Date_planned_deadline}"
    elif id_info.Date_planned_deadline != None and message_states_app[msg_id] == "second" and existing_record_HR == None:   
        reply_markup = init_transf_d
        date_planned = f"\n<b>–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞:</b> {id_info.Date_planned_deadline}"
    elif id_info.Date_planned_deadline == None and message_states_app[msg_id] == "first" and existing_record_HR == None:
        reply_markup = init_transf
        date_planned = ""
    elif id_info.Date_planned_deadline == None and message_states_app[msg_id] == "second" and existing_record_HR == None:
        reply_markup = init_transf_d
        date_planned = ""

    init_info = session.query(table).filter(table.c.id == number_init).first()
    surname_init = init_info.Surname
    name_init = init_info.Name
    middle_init = init_info.Middle_name
    division_init = init_info.Division
    position_init = init_info.Position
    email_init = init_info.Email
    phone_init = init_info.Phone_number
 
    goals_list = goals_list.split("\\n")
    text = ""
    for i in enumerate(goals_list):
        text += f"{i[1]}\n" 

    if msg_id in message_states_app and message_states_app[msg_id] == "first":
        await bot.edit_message_text(chat_id=call.from_user.id,
                                    message_id=msg_id,
                                    text =  
                                    f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                                    f"<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: </b>{number_q}\n"
                                    f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {surname_init} {name_init[0]}. {middle_init[0]}.\n"
                                    f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {fullname_employee}, {divis_info}, {post_info}\n"
                                    f"<b>–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –°—Ä–æ–∫–∞:</b> {deadline_prob}.\n"
                                    f"<b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:</b> {date_info}"
                                    f"{date_planned}", 
                                    parse_mode="HTML", reply_markup=reply_markup)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ "second"
        message_states_app[msg_id] = "second"
    elif msg_id in message_states_app and message_states_app[msg_id] == "second":
        await bot.edit_message_text(chat_id=call.from_user.id,
                                    message_id=msg_id,
                                    text=
                                    f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                                    f"<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: </b>{number_q}\n"
                                    f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: </b>{surname_init} {name_init} {middle_init}\n"
                                    f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å: </b>{division_init}\n"
                                    f"<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: </b>{position_init}\n"
                                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω: </b>{phone_init}\n"
                                    f"<b>–ü–æ—á—Ç–∞: </b>{email_init}\n"
                                    f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫: </b>{fullname_employee}\n{divis_info}\n{post_info}\n"
                                    f"<b>–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –°—Ä–æ–∫–∞: </b>{deadline_prob}\n"
                                    f"{text}"
                                    f"<b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:</b> {date_info}"
                                    f"{date_planned}", 
                                    parse_mode="HTML", reply_markup=reply_markup)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ "first"
        message_states_app[msg_id] = "first"




@user_private_router.callback_query(F.data.startswith("stop_application"))
async def stop_app(callback: types.CallbackQuery):
    await callback.message.delete_reply_markup() 
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è", reply_markup=reply.main
    )

@user_private_router.callback_query(F.data.startswith("no_application"))
async def no_app(callback:types.CallbackQuery):
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
        reply_markup=get_callback_btns(
                btns={
                    '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': f'search_changed',
                    '–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ò–°': f'is_change',
                    '–¶–µ–ª–∏': f'goals_change',
                }
            ),    
    )


@user_private_router.callback_query(F.data.startswith("is_change"))
async def is_change(callback:types.CallbackQuery, state:FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é <b>–¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ò–°</b>", 
    )
    await state.set_state(transferRequest.is_staff)
    await state.update_data(is_changed=True)


@user_private_router.callback_query(F.data.startswith("goals_change"))
async def goals_change(callback:types.CallbackQuery, state:FSMContext):
    await callback.message.delete_reply_markup()
    data = await state.get_data()

    goals_list = data.get("goals_list")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å",  
        reply_markup=get_callback_btns(
        btns={
            f"–¶–µ–ª—å {i + 1}": f"goal_{i}" for i in range(len(goals_list))
        }
        )
    )
   
@user_private_router.callback_query(F.data.startswith("goal_"))
async def goal_change(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ü–µ–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    goal_number = int(callback.data.split("_")[1])

    await callback.message.delete_reply_markup()

    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>—Ü–µ–ª—å {goal_number+1}:</b>"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
    await state.set_state(transferRequest.goals_staff)
    await state.update_data({"goal_number": goal_number, "step": 1})
    await state.update_data(goals_changed=True)




